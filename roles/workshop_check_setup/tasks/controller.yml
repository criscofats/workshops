---
- name: Ensure workshop folder {{ ec2_name_prefix }} exists
  ansible.builtin.file:
    path: "{{ output_dir }}"
    state: directory

# https://access.redhat.com/articles/3626371#bgenerating-an-access-tokenb-4
#
# equivalent of 
# curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=rhsm-api -d refresh_token=$offline_token
- name: Generating an access token
  uri:
    url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
    method: POST
    body_format: form-urlencoded
    return_content: true
    body:
      grant_type: "refresh_token"
      client_id: "rhsm-api"
      refresh_token: "{{ offline_token }}"
  register: temp_token
  until: temp_token is not failed
  retries: 15
  delay: 20

- name: Set fact for access token
  ansible.builtin.set_fact:
    rh_access_token: "{{ temp_token.json.access_token }}"

- name: Request manifest export
  ansible.builtin.uri:
    url: "{{ manifest_download_url }}/export"
    method: GET
    headers:
      Authorization: "Bearer {{ rh_access_token }}"
  register: rh_manifest_export_request
- name: Register exportJobID
  ansible.builtin.set_fact:
    rh_export_job_id: "{{ rh_manifest_export_request['json']['body']['exportJobID'] }}"
- name: Get export job status
  ansible.builtin.uri:
    url: "{{ manifest_download_url }}/exportJob/{{ rh_export_job_id | urlencode }}"
    method: GET
    headers:
      Authorization: "Bearer {{ rh_access_token }}"
    status_code:
      - 200
      - 202
  register: rh_manifest_export_status
  until: rh_manifest_export_status.status == 200
  retries: 5
  delay: 10
- name: "Download manifest file to {{ playbook_dir }}/manifest.zip"
  ansible.builtin.uri:
    url: "{{ manifest_download_url }}/export/{{ rh_manifest_export_status['json']['body']['exportID'] | urlencode }}"
    method: GET
    headers:
      Authorization: "Bearer {{ rh_access_token }}"
    dest: "{{ playbook_dir }}/manifest.zip"
  register: rh_manifest_download

- name: Check license block
  block:
    - name: Check that the manifest.zip exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/manifest.zip"
      register: manifest_result
    - ansible.builtin.fail:
        msg: "Need a manifest file at {{ playbook_dir }}/manifest.zip"
      when:
        - not manifest_result.stat.exists
  rescue:
    - name: Checking for base64_manifest since no manifest.zip found
      ansible.builtin.debug:
        msg: Checking for variable base64_manifest
    - name: fail if there is also no base64_manifest
      ansible.builtin.fail:
        msg: no manifest.zip file found and no base64_manifest variable found
      when: base64_manifest is not defined
    - name: Rescue worked, base64 var found
      ansible.builtin.debug:
        msg: The variable base64_manifest was located
