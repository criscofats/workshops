---
- ansible.builtin.set_fact:
    async_timeout_seconds: "{{ student_total * 120 }}"
    async_wait_for_retries: "{{ student_total * 10 }}"

- name: Create EC2 instances for node1
  amazon.aws.ec2_instance:
    state: running
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image_id: "{{ node_ami_rhel.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node1": "{{ ec2_name_prefix }}-node1"
    tags:
      Workshop_node1: "{{ ec2_name_prefix }}-node1"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "node1"
      username: "{{ ec2_info[rhel].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[rhel].disk_volume_type }}"
          volume_size: "{{ ec2_info[rhel].disk_space }}"
          iops: "{{ ec2_info[rhel].disk_iops }}"
          throughput: "{{ ec2_info[rhel].disk_throughput }}"
          delete_on_termination: true
  async: "{{ async_timeout_seconds }}"
  poll: 0
  register: node1_async

- name: Create EC2 instances for node2
  amazon.aws.ec2_instance:
    state: running
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image_id: "{{ node_ami_rhel.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node2": "{{ ec2_name_prefix }}-node2"
    tags:
      Workshop_node2: "{{ ec2_name_prefix }}-node2"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "node2"
      username: "{{ ec2_info[rhel].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[rhel].disk_volume_type }}"
          volume_size: "{{ ec2_info[rhel].disk_space }}"
          iops: "{{ ec2_info[rhel].disk_iops }}"
          throughput: "{{ ec2_info[rhel].disk_throughput }}"
          delete_on_termination: true
  async: "{{ async_timeout_seconds }}"
  poll: 0
  register: node2_async

- name: Create EC2 instances for node3
  amazon.aws.ec2_instance:
    state: running
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image_id: "{{ node_ami_rhel.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node3": "{{ ec2_name_prefix }}-node3"
    tags:
      Workshop_node3: "{{ ec2_name_prefix }}-node3"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "node3"
      username: "{{ ec2_info[rhel].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[rhel].disk_volume_type }}"
          volume_size: "{{ ec2_info[rhel].disk_space }}"
          iops: "{{ ec2_info[rhel].disk_iops }}"
          throughput: "{{ ec2_info[rhel].disk_throughput }}"
          delete_on_termination: true
  async: "{{ async_timeout_seconds }}"
  poll: 0
  register: node3_async

# Create isolated/remote node for Adv Tower lab when cluster install

- name: Create EC2 instances for isonode
  amazon.aws.ec2_instance:
    state: running
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image_id: "{{ node_ami_rhel.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    filters:
      instance-state-name: running
      "tag:Workshop_isonode": "{{ ec2_name_prefix }}-isonode"
    tags:
      Workshop_isonode: "{{ ec2_name_prefix }}-isonode"
      Workshop: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "isonode"
      username: "{{ ec2_info[rhel].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[rhel].disk_volume_type }}"
          volume_size: "{{ ec2_info[rhel].disk_space }}"
          iops: "{{ ec2_info[rhel].disk_iops }}"
          throughput: "{{ ec2_info[rhel].disk_throughput }}"
          delete_on_termination: true
  when: create_cluster|bool
  async: "{{ async_timeout_seconds }}"
  poll: 0
  register: isonode_async

- name: Create EC2 instances for remotenode
  amazon.aws.ec2_instance:
    state: running
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image_id: "{{ node_ami_rhel.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    filters:
      instance-state-name: running
      "tag:Workshop_remotenode": "{{ ec2_name_prefix }}-remotenode"
    tags:
      Workshop_remotenode: "{{ ec2_name_prefix }}-remotenode"
      Workshop: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "remotenode"
      username: "{{ ec2_info[rhel].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[rhel].disk_volume_type }}"
          volume_size: "{{ ec2_info[rhel].disk_space }}"
          iops: "{{ ec2_info[rhel].disk_iops }}"
          throughput: "{{ ec2_info[rhel].disk_throughput }}"
          delete_on_termination: true
  when: create_cluster|bool
  async: "{{ async_timeout_seconds }}"
  poll: 0
  register: remotenode_async

###########################################################################
### THIS IS A BIT OF A HACK AND REQUIRES BOOK KEEPING BUT IT'S FAST
#
#   The order in which the _async vars are listed here is the order in
#   which they will be registered in the
#   wait_for_ec2_instance_creation['results'] variable and that is important
#   for the following set_fact that makes that information usable later on
- name: Wait for async instance creation to complete
  ansible.builtin.async_status:
    jid: "{{ item['ansible_job_id'] }}"
  register: wait_for_ec2_instance_creation
  when: "'ansible_job_id' in item"
  until: wait_for_ec2_instance_creation.finished
  retries: "{{ [async_wait_for_retries | int, 60] | max }}"
  loop:
    - "{{ node1_async }}"
    - "{{ node2_async }}"
    - "{{ node3_async }}"
    - "{{ isonode_async }}"
    - "{{ remotenode_async }}"

# BOOK KEEPING FOR ABOVE async_status
#   NOTE: Order matters here and must match the above task
- ansible.builtin.set_fact:
    node1_output: "{{ wait_for_ec2_instance_creation['results'][0] }}"
    node2_output: "{{ wait_for_ec2_instance_creation['results'][1] }}"
    node3_output: "{{ wait_for_ec2_instance_creation['results'][2] }}"
    isonode_output: "{{ wait_for_ec2_instance_creation['results'][3] }}"
    remotenode_output: "{{ wait_for_ec2_instance_creation['results'][4] }}"

    ###
    ###########################################################################


- name: Grab instance ids to tag node1
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node1": "{{ ec2_name_prefix }}-node1"
  register: node1_output

- name: Ensure tags are present for node1
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node1"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node1_output.instances }}"
  when: node1_output.instances|length > 0

- name: Associate IAM instance profile with node1
  amazon.aws.ec2_instance:
    instance_ids: "{{ item.1.instance_id }}"
    region: "{{ ec2_region }}"
    instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
    state: running
    wait: true
  with_indexed_items:
    - "{{ node1_output.instances }}"
  register: associate_iam_instance_profile
  until: associate_iam_instance_profile is not failed
  retries: 12
  delay: 10
  when:
    - node1_output.instances|length > 0
    - tower_node_aws_api_access|default(false)|bool


- name: Grab instance ids to tag node2
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node2": "{{ ec2_name_prefix }}-node2"
  register: node2_output

- name: Ensure tags are present for node2
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node2"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node2_output.instances }}"
  when: node2_output.instances|length > 0

- name: Associate IAM instance profile with node2
  amazon.aws.ec2_instance:
    instance_ids: "{{ item.1.instance_id }}"
    region: "{{ ec2_region }}"
    instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
    state: running
    wait: true
  with_indexed_items:
    - "{{ node2_output.instances }}"
  register: associate_iam_instance_profile
  until: associate_iam_instance_profile is not failed
  retries: 12
  delay: 10
  when:
    - node2_output.instances|length > 0
    - tower_node_aws_api_access|default(false)|bool


- name: Grab instance ids to tag node3
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node3": "{{ ec2_name_prefix }}-node3"
  register: node3_output

- name: Ensure tags are present for node3
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node3"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node3_output.instances }}"
  when: node3_output.instances|length > 0

- name: Associate IAM instance profile with node3
  amazon.aws.ec2_instance:
    instance_ids: "{{ item.1.instance_id }}"
    region: "{{ ec2_region }}"
    instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
    state: running
    wait: true
  with_indexed_items:
    - "{{ node3_output.instances }}"
  register: associate_iam_instance_profile
  until: associate_iam_instance_profile is not failed
  retries: 12
  delay: 10
  when:
    - node3_output.instances|length > 0
    - tower_node_aws_api_access|default(false)|bool


- name: Grab instance ids to tag isonode
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_isonode": "{{ ec2_name_prefix }}-isonode"
  register: isonode_output
  when: create_cluster|bool

- name: Ensure tags are present for isonode
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-isonode"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ isonode_output.instances }}"
  when: create_cluster|bool and isonode_output.instances|length > 0


- name: Grab instance ids to tag isonode
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_remotenode": "{{ ec2_name_prefix }}-remotenode"
  register: remotenode_output
  when: create_cluster|bool

- name: Ensure tags are present for remotenode
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-remotenode"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ remotenode_output.instances }}"
  when: create_cluster|bool and remotenode_output.instances|length > 0
